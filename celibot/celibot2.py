#!venv/bin/python
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from aiogram.utils.exceptions import BotBlocked
import aiosqlite
from datetime import datetime

bot = Bot(token="")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

info="""–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –º–µ–Ω—é;
/start_timer - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—á—ë—Ç—á–∏–∫;
/reset_timer - –æ–±–Ω—É–ª–∏—Ç—å –¥–Ω–∏;
/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π;
/statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞;
/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""

async def write(table,id,data):
    async with aiosqlite.connect('celibat.db') as con:
        await con.execute("INSERT into {} values (\"{}\", \"{}\");".format(table,id,data))
        await con.commit()
		
async def read_break(id):
    try:
        async with aiosqlite.connect('celibat.db') as con:
            result= await [x for x in con.execute("SELECT data from {} WHERE id=(\"{}\");".format(id))]
            return len(result),'\n'.join(result)
    except StopIteration:
	        return
		
async def update_user(id, data):
    async with aiosqlite.connect('celibat.db') as con:
        await con.execute("UPDATE users set data =(\"{}\") WHERE id=(\"{}\");".format(data,id))
		
async def read_user(id):
    try:
        async with aiosqlite.connect('celibat.db') as con:
            async with con.execute("SELECT data from users WHERE id=(\"{}\");".format(id)) as cursor:
                return await cursor.fetchone()
    except StopIteration:
	        return
			
async def count_user():
    try:
        async with aiosqlite.connect('celibat.db') as con:
            async with con.execute("SELECT count(id) from users;") as cursor:
                async for row in cursor:
                    all=int(row[0])
            async with con.execute("SELECT id from breakdowns;") as cursor:
                breaks=await cursor.fetchall()
            breaks= len(set(breaks))
            return all,all-breaks,'{:.1%}'.format((all-breaks)/all)
    except StopIteration:
	        return


@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup()
    buttonStartTimer = types.InlineKeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä')
    buttonRestartTimer = types.InlineKeyboardButton('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä')
    buttonCheck = types.InlineKeyboardButton('üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
    buttonStats = types.InlineKeyboardButton('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    markup.row(buttonStartTimer, buttonRestartTimer)
    markup.row(buttonCheck, buttonStats)
    await message.answer(f'{info}', reply_markup=markup)

@dp.message_handler(commands='start_timer')
async def start_timer(message):
    if not await read_user(message.from_user.id):
        await write('users',message.from_user.id, datetime.now().strftime('%Y-%m-%d'))
        await message.reply('–í—Ä–µ–º—è –ø–æ—à–ª–æ')
    else:
        await message.reply('–í—Ä–µ–º—è —É–∂–µ –ø–æ—à–ª–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π /reset_timer')

@dp.message_handler(commands='reset_timer')
async def reset_timer(message):
    if await read_user(message.from_user.id):
        await update_user(message.from_user.id, datetime.now().strftime('%Y-%m-%d'))
        await write('breakdowns', datetime.now().strftime('%Y-%m-%d'),message.from_user.id)
        await message.reply('–í—Ä–µ–º—è –ø–æ—à–ª–æ –∑–∞–Ω–æ–≤–æ')


@dp.message_handler(commands='check')
async def check(message):
    try:
        readed=await read_user(message.from_user.id)
        if readed:
            await message.reply('–í—ã–¥–µ—Ä–∂–∞–ª –¥–Ω–µ–π: {}'.format((datetime.now() - datetime.strptime(*readed, '%Y-%m-%d')).days))
        else:
	        await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start')
    except Exception as e:
        print(e)

@dp.message_handler(commands='statistics')
async def statistics(message):
    stat=await count_user()
    await message.reply('–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n–í—ã–¥–µ—Ä–∂–∞–ª–æ: {}  ({})'.format(*stat))

@dp.message_handler()
async def after_text(message):
    if message.text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä':
        await start_timer(message)
    if message.text == 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä':
        await reset_timer(message)
    if message.text == 'üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å':
        await check(message)
    if message.text == 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await statistics(message)
    if message.text == '‚ùì –°–ø—Ä–∞–≤–∫–∞':
        await help(message)

@dp.inline_handler()
async def default_query(inline_query: InlineQuery):
    try:
        readed = await read_user(inline_query.from_user.id)
        if readed:
            counted=await count_user()
            days1= (datetime.now() - datetime.strptime(*readed, '%Y-%m-%d')).days
            r1 = InlineQueryResultArticle(id='1', title='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–∏', input_message_content=types.InputTextMessageContent('–í—ã–¥–µ—Ä–∂–∞–ª –¥–Ω–µ–π: {}'.format(days1)))
            r2 = InlineQueryResultArticle(id='2', title='üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', input_message_content=types.InputTextMessageContent('–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n–í—ã–¥–µ—Ä–∂–∞–ª–æ: {}  ({})'.format(*counted)))
            r3 = InlineQueryResultArticle(id='3', title='‚ùì –°–ø—Ä–∞–≤–∫–∞', input_message_content=types.InputTextMessageContent(info))
            await bot.answer_inline_query(inline_query.id, [r1,r2,r3], cache_time=1)
        else:
            r1 = InlineQueryResultArticle(id='3', title='‚ùì –°–ø—Ä–∞–≤–∫–∞', input_message_content=types.InputTextMessageContent(info))
            await bot.answer_inline_query(inline_query.id, [r1])
    except Exception as e:
        print(e)

@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
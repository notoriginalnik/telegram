import telebot
from telebot import types
from datetime import datetime
from datetime import date
import sqlite3

bot = telebot.TeleBot('token')

def write(table,id,data):
    try:
        with sqlite3.connect('celibat.db', check_same_thread=False) as con:
            con.execute("INSERT into {} values (\"{}\", \"{}\");".format(table,id,data))
    except Exception as e:
        print(e)

def read_break(id):
    try:
        with sqlite3.connect('celibat.db', check_same_thread=False) as con:
            result=[x for x in con.execute("SELECT data from {} WHERE id=(\"{}\");".format(id))]
            return len(result),'\n'.join(result)
    except StopIteration as e:
	        print(e)
		
def update_user(id, data):
    try:
        with sqlite3.connect('celibat.db', check_same_thread=False) as con:
            con.execute("UPDATE users set data =(\"{}\") WHERE id=(\"{}\");".format(data,id))
    except Exception as e:
        print(e)


def read_user(id):
    try:
        with sqlite3.connect('celibat.db', check_same_thread=False) as con:
            return next(con.execute("SELECT data from users WHERE id=(\"{}\");".format(id)))
    except StopIteration as e:
	        print(e)
			
def count_user():
    try:
        with sqlite3.connect('celibat.db', check_same_thread=False) as con:
            all=int(next(con.execute("SELECT count(id) from users;"))[0])
            breaks=len(set([x for x in con.execute("SELECT id from breakdowns;")]))
            return all,all-breaks,'{:.1%}'.format((all-breaks)/all)
    except StopIteration as e:
	        print(e)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    buttonStartTimer = types.InlineKeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä')
    buttonRestartTimer = types.InlineKeyboardButton('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä')
    buttonCheck = types.InlineKeyboardButton('üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
    buttonStats = types.InlineKeyboardButton('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    buttonHelp = types.InlineKeyboardButton('‚ùì –°–ø—Ä–∞–≤–∫–∞')

    markup.row(buttonStartTimer, buttonRestartTimer)
    markup.row(buttonCheck, buttonStats)
    markup.row(buttonHelp)

    bot.send_message(message.chat.id, f'–ú–µ–Ω—é:\n{info}', reply_markup=markup)

@bot.message_handler(commands=['start_timer'])
def start_timer(message):
    if not read_user(message.from_user.id):
        write('users',message.from_user.id, datetime.now().strftime('%Y-%m-%d'))
        bot.reply_to(message, '–í—Ä–µ–º—è –ø–æ—à–ª–æ')
    else:
        bot.reply_to(message, '–í—Ä–µ–º—è —É–∂–µ –ø–æ—à–ª–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π /reset_timer')

@bot.message_handler(commands=['reset_timer'])
def reset_timer(message):
    if read_user(message.from_user.id):
        update_user(message.from_user.id, datetime.now().strftime('%Y-%m-%d'))
        write('breakdowns', datetime.now().strftime('%Y-%m-%d'),message.from_user.id)
        bot.reply_to(message, '–í—Ä–µ–º—è –ø–æ—à–ª–æ –∑–∞–Ω–æ–≤–æ')

@bot.message_handler(commands=['check'])
def check(message):
    try:
        if read_user(message.from_user.id):
            bot.reply_to(message, '–í—ã–¥–µ—Ä–∂–∞–ª –¥–Ω–µ–π: {}'.format((datetime.now() - datetime.strptime(*read_user(message.from_user.id), '%Y-%m-%d')).days))
			#bot.reply_to(message, '–í—ã–¥–µ—Ä–∂–∞–ª –¥–Ω–µ–π: {}\nC—Ä—ã–≤–æ–≤: {}\n{}'.format((datetime.now() - datetime.strptime(*read_user(message.from_user.id), '%Y-%m-%d')).days),*read_break(message.from_user.id))
        else:
	        bot.reply_to(message, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start')
    except Exception as e:
        print(e)

@bot.message_handler(commands=['statistics'])
def statistics(message):
    bot.reply_to(message, '–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n–í—ã–¥–µ—Ä–∂–∞–ª–æ: {}  ({})'.format(*count_user()))
	
info="""
/start - –º–µ–Ω—é;
/start_timer - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—á—ë—Ç—á–∏–∫;
/reset_timer - –æ–±–Ω—É–ª–∏—Ç—å –¥–Ω–∏;
/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π;
/statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞;
"""

@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message, info)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def after_text(message):
    if message.text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä':
        start_timer(message)
    if message.text == 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä':
        reset_timer(message)
    if message.text == 'üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å':
        check(message)
    if message.text == 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        statistics(message)
    if message.text == '‚ùì –°–ø—Ä–∞–≤–∫–∞':
        help(message)

#–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ inline menu
#–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º —á—Ç–æ –≤–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É, –∞ –Ω–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@bot.inline_handler(lambda query: len(query.query) == 0)
def default_query(inline_query):
    try:
        if read_user(inline_query.from_user.id):
            days1=(datetime.now() - datetime.strptime(*read_user(inline_query.from_user.id), '%Y-%m-%d')).days
            r1 = types.InlineQueryResultArticle('1', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–∏', types.InputTextMessageContent('–í—ã–¥–µ—Ä–∂–∞–ª –¥–Ω–µ–π: {}'.format(days1)))
            r2 = types.InlineQueryResultArticle('2', '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', types.InputTextMessageContent('–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n–í—ã–¥–µ—Ä–∂–∞–ª–æ: {}  ({})'.format(*count_user())))
            r3 = types.InlineQueryResultArticle('3', '–°–ø—Ä–∞–≤–∫–∞', types.InputTextMessageContent(info))
            bot.answer_inline_query(inline_query.id, [r1,r2,r3])
        else:
            r1 = types.InlineQueryResultArticle('1', '–°–ø—Ä–∞–≤–∫–∞', types.InputTextMessageContent(info))
            bot.answer_inline_query(inline_query.id, [r1])
    except Exception as e:
        print(e)

if __name__ == '__main__':
    bot.infinity_polling()
